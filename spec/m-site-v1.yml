openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/m-site/M-Site/1.0.0
  - description: M-Site API
    url: https://members.ubfservice.com/m-site/v1
info:
  version: "1.0.0"
  title: Member management
  description: >-
    Church member management system that allows for: 
    keeping basic information about church attendees, 
    tracking worship service attendance and tracking Bible Studies.
security:
  - application:
      - read
      - write

tags:
  - name: Members
  - name: Fellowships
  - name: Campuses
  - name: Chapters
  - name: Worship Service
  - name: Bible Study

paths:
  /members:
    get:
      tags:
        - Members
      summary: Get member details
      description: >-
        Gets details about members.
      operationId: getMembers
      parameters:
        - $ref: '#/components/parameters/memberIdQuery'
        - $ref: '#/components/parameters/fellowshipIdQuery'
        - $ref: '#/components/parameters/campusIdQuery'
        - $ref: '#/components/parameters/lastName'
      responses:
        '200':
          $ref: '#/components/responses/200_GetMembers'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'

    post:
      tags:
        - Members
      summary: Add new member
      description: >-
        Adds new member to management site.
      operationId: createMembers
      requestBody:
        description: New member info that will be added to member management site.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Members'
            example:
              -
                title: 'Mr.'
                firstName: 'John'
                lastName: 'Doe'
                email: 'email@domain.com'
                fellowhipId: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
                phone:
                  -
                    type: 'cell'
                    number: '+1 555 555-5555'
      responses:
        '201':
          $ref: '#/components/responses/201_MemberCreated'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /members/{memberId}:
    put:
      tags:
        - Members
      summary: Update member
      description: Updates member information.
      operationId: updateMember
      parameters:
        - $ref: '#/components/parameters/memberId'
      requestBody:
        description: Member info that will be updated in member management site.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
            example:
              title: 'Mr.'
              firstName: 'John'
              lastName: 'Doe'
              email: 'email@domain.com'
              fellowhipId: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
              phone:
                -
                  type: 'cell'
                  number: '+1 555 555-5555'
      responses:
        '200':
          $ref: '#/components/responses/200_MemberUpdated'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'

    delete:
      tags:
        - Members
      summary: Delete member
      description: Deletes member information.
      operationId: deleteMembers
      parameters:
        - $ref: '#/components/parameters/memberId'

      responses:
        '204':
          $ref: '#/components/responses/204_Deleted'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'


  /fellowships:
    get:
      tags:
        - Fellowships
      summary: Get fellowship details
      description: >-
        Gets detailed fellowship information.
      operationId: getFellowships
      parameters:
        - $ref: '#/components/parameters/fellowshipIdQuery'
        - $ref: '#/components/parameters/fellowshipName'
      responses:
        '200':
          $ref: '#/components/responses/200_GetFellowships'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'

    post:
      tags:
        - Fellowships
      summary: Add new fellowship
      description: >-
        Adds new fellowship to management site.
      operationId: createFellowships
      requestBody:
        description: New fellowship info that will be added to member management site.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fellowships'
            example:
              -
                fellowshipName: 'Livingstones'
                fellowshipLeaderId: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
                campusId: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
                status: 'ACTIVE'

      responses:
        '201':
          $ref: '#/components/responses/201_FellowshipCreated'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /fellowships/{fellowshipId}:
    put:
      tags:
        - Fellowships
      summary: Update fellowship
      description: Updates fellowship information.
      operationId: updateFellowship
      parameters:
        - $ref: '#/components/parameters/fellowshipId'
      requestBody:
        description: Fellowship info that will be updated in member management site.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
            example:
              -
                fellowshipName: 'Livingstones'
                fellowshipLeaderId: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
                campusId: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
                status: 'ACTIVE'
      responses:
        '200':
          $ref: '#/components/responses/200_FellowshipUpdated'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'

    delete:
      tags:
        - Fellowships
      summary: Delete fellowship
      description: Deletes fellowship information.
      operationId: deleteFellowship
      parameters:
        - $ref: '#/components/parameters/fellowshipId'
      responses:
        '204':
          $ref: '#/components/responses/204_Deleted'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /campuses:
    get:
      tags:
        - Campuses
      summary: Get campus details
      description: >-
        Gets detailed campus information.
      operationId: getCampuses
      parameters:
        - $ref: '#/components/parameters/campusIdQuery'
        - $ref: '#/components/parameters/chapterIdQuery'
        - $ref: '#/components/parameters/campusName'
      responses:
        '200':
          $ref: '#/components/responses/200_GetCampuses'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
    post:
      tags:
        - Campuses
      summary: Add new campus
      description: >-
        Adds new campus to management site.
      operationId: createCampuses
      requestBody:
        description: New campus info that will be added to member management site.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Campuses'
            example:
              -
                campusName: 'NEIU'
                campusCoordinatorId: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
                chapterId: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
                status: 'ACTIVE'

      responses:
        '201':
          $ref: '#/components/responses/201_CampusCreated'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /campuses/{campusId}:
    put:
      tags:
        - Campuses
      summary: Update campus
      description: Updates campus information.
      operationId: updateCampus
      parameters:
        - $ref: '#/components/parameters/campusId'
      requestBody:
        description: Fellowship info that will be updated in member management site.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Campus'
            example:
              -
                campusName: 'NEIU'
                campusCoordinatorId: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
                chapterId: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
                status: 'ACTIVE'
      responses:
        '200':
          $ref: '#/components/responses/200_CampusUpdated'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'

    delete:
      tags:
        - Campuses
      summary: Delete campus
      description: Deletes campus information.
      operationId: deleteCampus
      parameters:
        - $ref: '#/components/parameters/campusId'

      responses:
        '204':
          $ref: '#/components/responses/204_Deleted'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /chapters:
    get:
      tags:
        - Chapters
      summary: Get campus details
      description: >-
        Gets detailed campus information.
      operationId: getChapters
      parameters:
        - $ref: '#/components/parameters/chapterIdQuery'
        - $ref: '#/components/parameters/chapterName'
      responses:
        '200':
          $ref: '#/components/responses/200_GetChapters'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'

    post:
      tags:
        - Chapters
      summary: Add new chapter
      description: >-
        Adds new chapter to management site.
      operationId: createChapter
      requestBody:
        description: New chapter info that will be added to member management site.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Chapters'
            example:
              -
                chapterName: 'Chicago'
                status: 'ACTIVE'

      responses:
        '201':
          $ref: '#/components/responses/201_ChapterCreated'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /chapters/{chapterId}:
    put:
      tags:
        - Chapters
      summary: Update chapter
      description: Updates chapter information.
      operationId: updateChapter
      parameters:
        - $ref: '#/components/parameters/chapterId'
      requestBody:
        description: Chapter info that will be updated in member management site.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Chapter'
            example:
              -
                chapterName: 'Chicago'
                status: 'ACTIVE'
      responses:
        '200':
          $ref: '#/components/responses/200_ChapterUpdated'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'

    delete:
      tags:
        - Chapters
      summary: Delete chapter
      description: Deletes chapter information.
      operationId: deleteChapter
      parameters:
        - $ref: '#/components/parameters/chapterId'

      responses:
        '204':
          $ref: '#/components/responses/204_Deleted'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'

  /ws:
    get:
      tags:
        - Worship Service
      summary: Worship service operations
      description: >-
        This operation shows how to override the global security defined above,
        as we want to open it up for all users.
      responses:
        '200':
          description: OK
  /bstudy:
    get:
      tags:
        - Bible Study
      summary: Bible study operations
      description: >-
        This operation shows how to override the global security defined above,
        as we want to open it up for all users.
      responses:
        '200':
          description: OK


components:
  schemas:
    Members:
      type: array
      description: List of members.
      items:
        $ref: '#/components/schemas/Member'

    Member:
      type: object
      description: Details of a single member
      required:
        - email
        - fellowship
        - firstName
        - lastName
      properties:
        memberId:
          type: string
          format: uuid
        title:
          type: string
          example: 'Mr.'
        firstName:
          type: string
          example: 'John'
        lastName:
          type: string
          example: 'Smith'
        middleName:
          type: string
          example: 'Paul'
        email:
          type: string
          example: 'some@email.com'
        fellowshipId:
          type: string
          format: uuid
        address:
          $ref: '#/components/schemas/Address'
        phone:
          $ref: '#/components/schemas/PhoneNumbers'

    Address:
      type: object
      description: Member's address
      properties:
        street:
          type: string
          example: '5555 S Street Ave.'
        city:
          type: string
          example: 'Chicago'
        state:
          type: string
          example: 'AZ'
        country:
          type: string
          example: 'China'

    PhoneNumbers:
      type: array
      items:
        $ref: '#/components/schemas/PhoneNumber'

    PhoneNumber:
      type: object
      properties:
        type:
          type: string
          example: 'home'
        number:
          type: string
          example: '+1 555 555-5555'

    MemberStatuses:
      type: array
      items:
        $ref: '#/components/schemas/MemberStatus'

    MemberStatus:
      type: object
      description: Status of member update or creation.
      required:
        - status
        - memberId
      properties:
        status:
          type: string
          example: 'SUCCESS'
        memberId:
          type: string
          format: uuid
        message:
          type: string
          example: 'Added successfully.'

    Fellowships:
      type: array
      items:
        $ref: '#/components/schemas/Fellowship'

    Fellowship:
      type: object
      properties:
        fellowshipId:
          type: string
          format: uuid
        fellowshipName:
          type: string
          example: 'Livingstone'
        fellowshipLeaderId:
          type: string
          format: uuid
        campusId:
          type: string
          format: uuid

    FellowshipStatuses:
      type: array
      items:
        $ref: '#/components/schemas/FellowshipStatus'

    FellowshipStatus:
      type: object
      description: Status of fellowship update or creation.
      properties:
        status:
          type: string
          example: 'SUCCESS'
        fellowshipId:
          type: string
          format: uuid
        message:
          type: string
          example: 'Added successfully.'

    Campuses:
      type: array
      items:
        $ref: '#/components/schemas/Campus'

    Campus:
      type: object
      properties:
        campusId:
          type: string
          format: uuid
        campusName:
          type: string
          example: 'NEIU'
        campusCoordinatorId:
          type: string
          format: uuid
        chapterId:
          type: string
          format: uuid

    CampusStatuses:
      type: array
      items:
        $ref: '#/components/schemas/CampusStatus'

    CampusStatus:
      type: object
      description: Status of campus update or creation.
      properties:
        status:
          type: string
          example: 'SUCCESS'
        campusId:
          type: string
          format: uuid
        message:
          type: string
          example: 'Added successfully.'

    Chapters:
      type: array
      items:
        $ref: '#/components/schemas/Chapter'

    Chapter:
      type: object
      properties:
        chapterId:
          type: string
          format: uuid
        chapterName:
          type: string
          example: 'Chicago'

    ChapterStatuses:
      type: array
      items:
        $ref: '#/components/schemas/ChapterStatus'

    ChapterStatus:
      type: object
      description: Status of chapter update or creation.
      properties:
        status:
          type: string
          example: 'SUCCESS'
        chapterId:
          type: string
          format: uuid
        message:
          type: string
          example: 'Added successfully.'

    Error:
      type: object
      description: >-
        ErrorResponse represents error code, description for a given API.
        Every HTTP status code returns different `code` value
        in the response based on the nature of error occurred.
      required:
        - code
        - description
      properties:
        code:
          type: string
          description: Valid HTTP response code.
          example: '400.101'
        description:
          type: string
          description: Detailed description of the error.
          example: Request body does not match expected domain object.

  parameters:
    memberId:
      name: memberId
      in: path
      required: true
      schema:
        type: string
        format: uuid

    memberIdQuery:
      name: memberId
      in: query
      required: false
      schema:
        type: string
        format: uuid

    fellowshipId:
      name: fellowshipId
      in: path
      required: true
      schema:
        type: string
        format: uuid

    fellowshipIdQuery:
      name: fellowshipId
      in: query
      required: false
      schema:
        type: string
        format: uuid

    fellowshipName:
      name: fellowshipName
      in: query
      required: false
      schema:
        type: string
        example: 'Livingstones'

    campusId:
      name: campusId
      in: path
      required: true
      schema:
        type: string
        format: uuid

    campusIdQuery:
      name: campusId
      in: query
      required: false
      schema:
        type: string
        format: uuid

    campusName:
      name: campusName
      in: query
      required: false
      schema:
        type: string
        example: 'NEIU'

    chapterId:
      name: chapterId
      in: path
      required: true
      schema:
        type: string
        format: uuid

    chapterIdQuery:
      name: chapterId
      in: query
      required: false
      schema:
        type: string
        format: uuid

    chapterName:
      name: chapterName
      in: query
      required: false
      schema:
        type: string
        example: 'Chicago'

    lastName:
      name: lastName
      in: query
      required: false
      schema:
        type: string

  responses:
    200_GetMembers:
      description: List of members.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Members'

    200_GetFellowships:
      description: List of fellowshipos.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Fellowships'

    200_GetCampuses:
      description: List of campuses.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Campuses'

    200_GetChapters:
      description: List of chapters.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Chapters'

    201_MemberCreated:
      description: Status of new member creation.
      content:
        applicaton/json:
          schema:
            $ref: '#/components/schemas/MemberStatuses'

    201_FellowshipCreated:
      description: Status of new fellowship creation.
      content:
        applicaton/json:
          schema:
            $ref: '#/components/schemas/FellowshipStatuses'

    201_CampusCreated:
      description: Status of new campus creation.
      content:
        applicaton/json:
          schema:
            $ref: '#/components/schemas/CampusStatuses'

    201_ChapterCreated:
      description: Status of new chapter creation.
      content:
        applicaton/json:
          schema:
            $ref: '#/components/schemas/ChapterStatuses'

    200_MemberUpdated:
      description: Status of member update.
      content:
        applicaton/json:
          schema:
            $ref: '#/components/schemas/MemberStatus'
          example:
            status: 'SUCCESS'
            memberId: '3fa85f64-5717-4562-b3fc-2c963f66afa6'
            message: 'Updated successfully.'

    200_FellowshipUpdated:
      description: Status of fellowship update.
      content:
        applicaton/json:
          schema:
            $ref: '#/components/schemas/FellowshipStatus'

    200_CampusUpdated:
      description: Status of campus update.
      content:
        applicaton/json:
          schema:
            $ref: '#/components/schemas/CampusStatus'

    200_ChapterUpdated:
      description: Status of chapter update.
      content:
        applicaton/json:
          schema:
            $ref: '#/components/schemas/ChapterStatus'

    204_Deleted:
      description: Successful delete operation

    400BadRequest:
      description: Bad Request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: '400.001'
            message: Bad Request.

    401Unauthorized:
      description: Unauthorized.
      content:
        application/json:
          example:
            code: '401.006'
            message: Missing Authorization header or token value.
          schema:
            $ref: '#/components/schemas/Error'

    403Forbidden:
      description: Forbidden.
      content:
        application/json:
          example:
            code: '403.001'
            message: Forbidden.
          schema:
            $ref: '#/components/schemas/Error'

    404NotFound:
      description: Not Found.
      content:
        application/json:
          example:
            code: '404.001'
            message: Resource Not Found.
          schema:
            $ref: '#/components/schemas/Error'

    500InternalServerError:
      description: Internal Server Error.
      content:
        application/json:
          example:
            code: '500.001'
            message: Internal Server Error.
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    application:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: 'https://example.com/oauth/token'
          scopes:
            write: allows modifying resources
            read: allows reading resources
